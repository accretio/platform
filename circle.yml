general:
  build_dir: lab
  branches:
    only:
      - master
      - dockerize-lab
      - prod
      - /release.*/
      
machine:
  environment:
    PROJECT_NAME: accretio-platform
    STAGING_CLUSTER_NAME: platform-staging
    PROD_CLUSTER_NAME: platform-prod
    STAGING_CLOUDSDK_COMPUTE_ZONE: us-central1-c
    PROD_CLOUDSDK_COMPUTE_ZONE: us-west1-b
    GOOGLE_APPLICATION_CREDENTIALS: ${HOME}/gcloud-service-key.json
  services:
    - docker

dependencies:
  pre:
    - sudo /opt/google-cloud-sdk/bin/gcloud --quiet components update --version 147.0.0
    - sudo /opt/google-cloud-sdk/bin/gcloud --quiet components update --version 147.0.0 kubectl
    - echo $ACCT_AUTH | base64 --decode -i > ${HOME}/gcloud-service-key.json
    - echo $LAB_SECRET | base64 --decode -i > ${HOME}/lab-secret.yml
    - sudo /opt/google-cloud-sdk/bin/gcloud auth activate-service-account --key-file ${HOME}/gcloud-service-key.json
    - sudo /opt/google-cloud-sdk/bin/gcloud config set project $PROJECT_NAME
 
  
checkout:
  post:
    - echo "export default function setDevConfig(config) {}" > config_dev.js

test:
  override:
    - "true"

# todo: try to factorize some of the following code
deployment:
  staging:
    branch: [ dockerize-lab, master ]
    commands:
      - sudo /opt/google-cloud-sdk/bin/gcloud config set compute/zone ${STAGING_CLOUDSDK_COMPUTE_ZONE}
      - sudo /opt/google-cloud-sdk/bin/gcloud --quiet config set container/cluster $STAGING_CLUSTER_NAME
      - sudo /opt/google-cloud-sdk/bin/gcloud --quiet container clusters get-credentials $STAGING_CLUSTER_NAME
      - npm run build
      - docker build -t gcr.io/${PROJECT_NAME}/lab:$CIRCLE_SHA1 .
      - docker tag gcr.io/${PROJECT_NAME}/lab:$CIRCLE_SHA1 gcr.io/${PROJECT_NAME}/lab:latest
      - sudo /opt/google-cloud-sdk/bin/gcloud docker -- push gcr.io/${PROJECT_NAME}/lab:$CIRCLE_SHA1
      - sudo /opt/google-cloud-sdk/bin/gcloud docker -- push gcr.io/${PROJECT_NAME}/lab:latest
      - sudo chown -R ubuntu:ubuntu /home/ubuntu/.kube
      - kubectl apply -f ops/lab-service.yml
      - kubectl apply -f ops/es-service.yml
      - cat ops/es-deployment.yml | sed s@\$\$ES_PERSISTENT_DISK@${STAGING_ES_PERSISTENT_DISK}@ | kubectl apply -f  -
      - cat ops/lab-deployment.yml | sed s@\$\$LAB_VERSION@${CIRCLE_SHA1}@ | sed s@\$\$AWS_ACCESS_KEY_ID@${AWS_ACCESS_KEY_ID}@ | sed s@\$\$AWS_SECRET_ACCESS_KEY@${AWS_SECRET_ACCESS_KEY}@ | sed s@\$\$STRIPE_PK@${STAGING_STRIPE_PK}@ | sed s@\$\$STRIPE_SK@${STAGING_STRIPE_SK}@ | sed s@\$\$SLACK_WEBHOOK@${SLACK_WEBHOOK}@ | sed s@\$\$URL@${STAGING_URL}@ | sed s@\$\$SLACK_CHANNEL@${STAGING_SLACK_CHANNEL}@ | kubectl apply -f  - 
      - kubectl apply -f ${HOME}/lab-secret.yml
      - kubectl apply -f ops/lab-ingress.yml
  prod:
    branch: prod
    commands:
      - sudo /opt/google-cloud-sdk/bin/gcloud config set compute/zone ${PROD_CLOUDSDK_COMPUTE_ZONE}
      - sudo /opt/google-cloud-sdk/bin/gcloud --quiet config set container/cluster $PROD_CLUSTER_NAME
      - sudo /opt/google-cloud-sdk/bin/gcloud --quiet container clusters get-credentials $PROD_CLUSTER_NAME
      - npm run build
      - docker build -t gcr.io/${PROJECT_NAME}/lab:$CIRCLE_SHA1 .
      - docker tag gcr.io/${PROJECT_NAME}/lab:$CIRCLE_SHA1 gcr.io/${PROJECT_NAME}/lab:latest
      - sudo /opt/google-cloud-sdk/bin/gcloud docker -- push gcr.io/${PROJECT_NAME}/lab:$CIRCLE_SHA1
      - sudo /opt/google-cloud-sdk/bin/gcloud docker -- push gcr.io/${PROJECT_NAME}/lab:latest
      - sudo chown -R ubuntu:ubuntu /home/ubuntu/.kube
      - kubectl apply -f ops/lab-service.yml
      - kubectl apply -f ops/es-service.yml
      - cat ops/es-deployment.yml | sed s@\$\$ES_PERSISTENT_DISK@${PROD_ES_PERSISTENT_DISK}@ | kubectl apply -f  -
      - cat ops/lab-deployment.yml | sed s@\$\$LAB_VERSION@${CIRCLE_SHA1}@ | sed s@\$\$AWS_ACCESS_KEY_ID@${AWS_ACCESS_KEY_ID}@ | sed s@\$\$AWS_SECRET_ACCESS_KEY@${AWS_SECRET_ACCESS_KEY}@ | sed s@\$\$STRIPE_PK@${PROD_STRIPE_PK}@ | sed s@\$\$STRIPE_SK@${PROD_STRIPE_SK}@ | sed s@\$\$SLACK_WEBHOOK@${SLACK_WEBHOOK}@ | sed s@\$\$URL@${PROD_URL}@ | sed s@\$\$SLACK_CHANNEL@${PROD_SLACK_CHANNEL}@ | kubectl apply -f  - 
      - kubectl apply -f ${HOME}/lab-secret.yml
      - kubectl apply -f ops/lab-ingress.yml
